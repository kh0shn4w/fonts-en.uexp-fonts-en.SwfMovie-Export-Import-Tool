#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <iterator>

using namespace std;

int main(int argc, char* argv[]) {
    if (argc != 4) {
        cerr << "Coded by Ameer Xoshnaw / GamesinKurdish.com\n";
        cerr << "Tool export/import font files for Dead Island 2 and Borderlands 3\n";
        cerr << "Supports .SwfMovie & .UEXP\n";
        cerr << "Usage: " << argv[0] << " <mode> <input_file> <output_file>\n";
        cerr << "Modes: export (from .uexp/.swfmovie to .gfx) or import (from .gfx to .uexp/.swfmovie)\n";
        return 1;
    }

    string mode = argv[1];
    string input = argv[2];
    string output = argv[3];

    vector<unsigned char> header = {
        0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x54, 0x47, 0x41,
        0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x2E, 0x2E,
        0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x2E, 0x2E, 0x2F, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65,
        0x2F, 0x6F, 0x61, 0x6B, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x2F, 0x55, 0x49, 0x2F, 0x5F, 0x53,
        0x68, 0x61, 0x72, 0x65, 0x64, 0x2F, 0x46, 0x6F, 0x6E, 0x74, 0x73, 0x2F, 0x66, 0x6F, 0x6E, 0x74,
        0x73, 0x5F, 0x65, 0x6E, 0x2E, 0x73, 0x77, 0x66, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00,
        0x00, 0x00, 0x24, 0x4F, 0x61, 0x6B, 0x42, 0x6F, 0x64, 0x79, 0x2F, 0x50, 0x6F, 0x73, 0x74, 0x65,
        0x72, 0x61, 0x6D, 0x61, 0x20, 0x54, 0x65, 0x78, 0x74, 0x00, 0x22, 0x00, 0x00, 0x00, 0x24, 0x4F,
        0x61, 0x6B, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x2F, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x61, 0x63, 0x68,
        0x20, 0x49, 0x74, 0x61, 0x6C, 0x69, 0x63, 0x2C, 0x20, 0x49, 0x74, 0x61, 0x6C, 0x69, 0x63, 0x00,
        0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x32, 0x30, 0x31,
        0x39, 0x2E, 0x30, 0x34, 0x2E, 0x32, 0x36, 0x2D, 0x32, 0x30, 0x2E, 0x34, 0x38, 0x2E, 0x35, 0x36,
        0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x40, 0xF7, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x3C, 0xF7, 0x04, 0x00
    };

    vector<unsigned char> footer = {
        0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x83, 0x2A, 0x9E
    };

    if (mode == "export") {
        ifstream in(input, ios::binary);
        if (!in) {
            cerr << "Cannot open input file: " << input << endl;
            return 1;
        }

        vector<unsigned char> data((istreambuf_iterator<char>(in)), istreambuf_iterator<char>());
        in.close();

        if (data.size() < header.size() + footer.size()) {
            cerr << "Input file is too small to contain header and footer." << endl;
            return 1;
        }

        if (!equal(header.begin(), header.end(), data.begin())) {
            cerr << "Header does not match." << endl;
            return 1;
        }

        auto footer_start = data.end() - footer.size();
        if (!equal(footer.begin(), footer.end(), footer_start)) {
            cerr << "Footer does not match." << endl;
            return 1;
        }

        ofstream out(output, ios::binary);
        if (!out) {
            cerr << "Cannot open output file: " << output << endl;
            return 1;
        }

        out.write(reinterpret_cast<const char*>(data.data() + header.size()), data.size() - header.size() - footer.size());
        out.close();

        cout << "Export successful: .gfx file created." << endl;
    }
    else if (mode == "import") {
        ifstream in(input, ios::binary);
        if (!in) {
            cerr << "Cannot open input file: " << input << endl;
            return 1;
        }

        vector<unsigned char> data((istreambuf_iterator<char>(in)), istreambuf_iterator<char>());
        in.close();

        ofstream out(output, ios::binary);
        if (!out) {
            cerr << "Cannot open output file: " << output << endl;
            return 1;
        }

        out.write(reinterpret_cast<const char*>(header.data()), header.size());
        out.write(reinterpret_cast<const char*>(data.data()), data.size());
        out.write(reinterpret_cast<const char*>(footer.data()), footer.size());
        out.close();

        cout << "Import successful: .uexp file created." << endl;
    }
    else {
        cerr << "Invalid mode. Use 'export' or 'import'." << endl;
        return 1;
    }

    return 0;
}